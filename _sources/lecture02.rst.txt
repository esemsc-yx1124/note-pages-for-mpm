.. _python_opt:

Lecture 02: Python 性能剖析与优化
=========================


性能剖析与优化的基本概念
-----------------------

- **逐步增加剖析的粒度**：`%timeit` -> `%prun` -> `%lprun`
  
  - **`%timeit`**：用于快速测量代码片段的执行时间，适合简单的、运行时间较短的代码段。它可以给出平均执行时间和标准差，用于识别显而易见的性能问题。
  - **`%prun`**：适用于更复杂的性能剖析。它可以提供函数级别的剖析信息，包括每个函数的调用次数、总执行时间和累计执行时间，用于找出代码中的性能瓶颈。
  - **`%lprun`**：用于逐行分析代码性能，帮助识别在函数内部每一行代码的执行时间和执行次数。它提供了最高粒度的剖析信息，适合对复杂函数进行深入的性能优化。

- **性能问题的重要性**
  
  - 代码效率如何影响项目的成功

- **Profiling 代码性能**
  
  - 使用 `time` 模块简单测量运行时间
    - 代码示例：`time.time()`
  - **Wall Time vs CPU Time**
    - `Wall Time`：从开始到结束的总时间，包括 I/O 等非计算时间。这意味着它衡量的是整个程序从启动到结束所花费的真实时间，包括程序等待输入输出或被操作系统调度的时间。
    - **为什么关注 Wall Time**：在计算密集型程序中，Wall Time 与 CPU Time 近似相同，因为主要耗费处理器时间，几乎没有或很少涉及 I/O 操作或其他延迟，这使得两者的耗时相差不大。
    - `CPU Time`：仅处理器计算的时间，不包括 I/O 等其他操作。

使用 Python 进行性能分析
----------------------

- **line profiler 和 LP run 的使用**

  - `line_profiler` 是用于逐行分析代码性能的工具。需要通过 `%lprun` 魔术命令来运行逐行分析。
  - 在使用 `%lprun` 之前，必须先加载扩展，如：`%load_ext line_profiler`。
  - `%lprun -f 函数名 函数调用` 用于对特定函数进行逐行分析。
  - 分析结果包括每行代码的执行次数（hits）和占总执行时间的比例，这有助于找出性能瓶颈。

如何进行有效的性能分析
----------------------

- 使用 `%prun` 或 `cProfile` 进行性能剖析时，可以通过以下关键指标来评估和优化性能：
  - **`ncalls`（调用次数）**：高调用次数且执行时间长的函数是性能优化的重点。
  - **`tottime`（总时间）**：函数自身执行的总时间，不包括子函数调用的时间。
  - **`cumtime`（累计时间）**：函数执行时间加上所有子函数调用的时间。
  - **`percall`（平均每次调用的时间）**：通过 `tottime/ncalls` 和 `cumtime/ncalls` 计算。

- 优化策略：优先优化高频调用、总执行时间较长的函数。

.. _complexity_analysis:

算法复杂度分析
--------------

大O表示法的意义
--------------

- **增长速度的描述**：大O表示法用于描述算法的增长速度，通常以输入规模（n）变化时，算法的执行时间或空间使用量如何变化。
- **上界衡量**：大O表示法用来衡量程序执行时间的上界（Upper Bound），即在最坏情况下，算法的执行时间如何增长。
- **输入规模 (n)**：通常用来表示输入数据的规模大小。
- **主导项（Dominant Term）**：在输入规模足够大时，主导项决定算法复杂度，其他次要项可以忽略。
- **时间复杂度与空间复杂度**：分别衡量算法的执行时间和内存消耗。

常见的大O复杂度
--------------

- **O(1)**：常数时间复杂度。
- **O(log n)**：对数时间复杂度。
- **O(n)**：线性时间复杂度。
- **O(n log n)**：如归并排序和快速排序。
- **O(n²)**：平方时间复杂度。
- **O(2^n)** 和 **O(n!)**：指数和阶乘时间复杂度。

.. _monte_carlo:

Monte Carlo 方法与优化
--------------

- **Monte Carlo 模拟计算 π 的方法**
  - 生成随机点，计算点在圆内的比例估算 π 值。
- **性能剖析**
  - 使用 `%prun` 和 `%lprun` 分析关键函数。

.. _optimization_strategies:

代码优化策略
--------------

- **减少不必要的函数调用**
- **使用高效的数据结构与算法**
- **避免深度递归**
  - 将递归转换为循环以提高效率
- **有效利用内存与缓存**

.. _tools_summary:

工具与命令总结
--------------

- **time 模块**：简单测量 Wall Time
- **timeit 模块**：测量代码片段的 Wall Time
  - `%timeit` 和 `%%timeit` 魔术命令
- **cProfile**：函数级别的性能分析
  - `%prun` 魔术命令
- **line profiler**：逐行分析函数内部性能
  - `%lprun` 魔术命令
- **安装命令**：
  - `pip install line_profiler` 用于安装 `line_profiler`
